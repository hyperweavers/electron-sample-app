name: CI

on:
  push:
    branches:
      - stable
      - alpha
      - beta

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        node_version: [ 12.x ]
        os: [ ubuntu-latest]
        #, windows-latest, macos-latest ]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node_version }}

      - name: Determine npm cache location
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: dependencies-cache
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install dependencies
        run: npm ci

      - name: Bump application version
        id: bump-version
        run: echo "::set-output name=version::$(node bump-version.js)"

      - name: Build application
        run: npm run make

      # - name: Copy artifact(s) to one place
      #   run: |
      #     mkdir ./out/artifacts
      #     find ./out/make/ -regex ".*\.\(exe\|deb\|rpm\|dmg\|zip\)" -exec cp {} ./out/artifacts \;
      #     cd ./out/artifacts
      #     rename -v "s/[^\/]+\./Frames-${{ steps.bump-version.outputs.version }}./" *

      - name: Upload build artifact(s)
        uses: actions/upload-artifact@v2
        if: ${{ success() }}
        with:
          name: packages
          # path: ./out/artifacts/*
          path: |
            ./out/make/**/*.exe
            ./out/make/**/*.deb
            ./out/make/**/*.rpm
            ./out/make/**/*.dmg
            ./out/make/**/*.zip

  release:
    if: ${{ success() }}
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        node_version: [ 12.x ]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node_version }}

      - name: Install Linux package(s)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends rename

      - name: Determine npm cache location
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: dependencies-cache
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install dependencies
        run: npm ci

      - name: Download build artifact(s)
        uses: actions/download-artifact@v2
        if: ${{ success() }}
        with:
          name: packages
          path: ./downloads

      - name: Copy artifact(s) to one place
        run: |
          mkdir ./artifacts
          find ./downloads/ -regex ".*\.\(exe\|deb\|rpm\|dmg\|zip\)" -exec cp {} ./artifacts \;
          cd ./out/artifacts
          rename -v "s/[^\/]+\./App./" *
          echo ${{ steps.bump-version.outputs.version }}

      - name: Configure GPG key
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
        run: |
          mkdir -p ~/.gnupg/
          printf "$GPG_SIGNING_KEY" | base64 --decode > ~/.gnupg/private.key
          gpg --import ~/.gnupg/private.key

      - name: Generate, sign and verify checksum for artifact(s)
        run: |
          cd ./artifacts
          shasum -a 256 *.{exe,deb,rpm,dmg,zip} > SHA256SUMS || true
          gpg --armor --output SHA256SUMS.gpg --detach-sig SHA256SUMS
          gpg --verify SHA256SUMS.gpg SHA256SUMS
          cat SHA256SUMS
          cat SHA256SUMS.gpg
          shasum -a 256 -c SHA256SUMS || true

      - name: Release application
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_AUTHOR_NAME: Kesavamoorthi Subramanian
          GIT_AUTHOR_EMAIL: k7moorthi@gmail.com
          GIT_COMMITTER_NAME: Kesavamoorthi Subramanian
          GIT_COMMITTER_EMAIL: k7moorthi@gmail.com
        run: |
          git config commit.gpgsign true
          npx semantic-release
